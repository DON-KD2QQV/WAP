<!--
Weather Alert Pro - Real-time Weather Application
A comprehensive weather monitoring application that fetches real-time data from OpenWeatherMap API and NOAA.

Features:
- Country State City or zipcode lookup with the capitals of each Country automatically selected for instant weather information anywhere
- Current weather conditions with temperature graphs
- 5-day and detailed forecasts  
- Air quality monitoring with pollutant breakdowns
- UV index with safety interpretations
- Weather alerts for severe conditions
- Interactive US radar maps with NOAA data
- ZIP code lookup and favorites management
- Responsive UI with zoom/pan controls

Author: Donald Bryant
Copyright: © 2025 Donald Bryant  
License: MIT License
Version: 1.0.1
Created: August 2025

Dependencies:
- Python 3.x
- flup advanced web server integration
- flask lets you create web servers and REST APIs in Python
- requests for API calls
- OpenWeatherMap API key required

This project demonstrates advanced Python programming with:
- REST API integration (OpenWeatherMap, NOAA)
- Interactive GUI development with Kivy
- Data visualization with matplotlib
- Real-time weather data processing
- Professional error handling and resource management

MIT License

Copyright (c) 2025 Donald Bryant

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Alert Pro - Real-time Weather Data from OpenWeatherMap</title>
    <meta name="description" content="Weather Alert Pro delivers real-time weather, forecasts, radar, air quality, UV index, and alerts powered by OpenWeatherMap.">
    <style>
        body {
            background: url('static/noaa-thunder.jpg') no-repeat center center fixed;
            background-size: cover;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: transparent; /* Make container transparent */
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            border: 3px solid #0984e3;
        }

        .header {
            text-align: center;
            color: #2d3436;
            margin-bottom: 30px;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            color: #e30909;
        }
        .subtitle {
            color: #FFD600; /* Caution yellow */
            font-size: 1.15em;
            margin-top: 0.5em;
            margin-bottom: 0.5em;
        }
        .controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .input-group {
            display: flex;
            flex-direction: column;
        }
        .input-group label {
            margin-bottom: 5px;
            font-weight: bold;
            color: #FFD600; 
        }
        .input-group select,
        .input-group input {
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        .input-group select:focus,
        .input-group input:focus {
            outline: none;
            border-color: #0984e3;
        }
        .buttons {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            margin: 20px 0;
        }
        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            color: white;
            background: #0984e3;
            transition: all 0.3s;
            font-size: 14px;
        }
        .btn:hover {
            background: #2d3436;
            transform: translateY(-2px);
        }
        .btn:active {
            transform: translateY(0);
        }
        .result-area {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            min-height: 200px;
        }
        .weather-display {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .weather-card, .result-area {
            background: rgba(255,255,255,0.95); /* Keep cards readable */
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .weather-card h3 {
            margin-top: 0;
            color: #0984e3;
        }
        .loading {
            display: none;
            text-align: center;
            color: #0984e3;
            font-style: italic;
            font-size: 18px;
            padding: 40px;
        }
        .error {
            color: #e74c3c;
            font-weight: bold;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            color: #636e72;
            font-size: 14px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
        }
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                padding: 20px;
            }
            .controls {
                grid-template-columns: 1fr;
            }
            .buttons {
                grid-template-columns: 1fr 1fr;
            }
        }
    </style>
</head>
<body>    
    <div class="container">
        <div class="header">
            <h1>Weather Alert Pro</h1>
            <div class="subtitle">Real-time weather, forecasts, radar, and more</div>
        </div>
        <div class="controls">
            <div class="input-group">
                <label for="country">Country</label>
                <select id="country" name="country">
                    <option value="AF">Afghanistan</option>
                    <option value="AX">Åland Islands</option>
                    <option value="AL">Albania</option>
                    <option value="DZ">Algeria</option>
                    <option value="AS">American Samoa</option>
                    <option value="AD">Andorra</option>
                    <option value="AO">Angola</option>
                    <option value="AI">Anguilla</option>
                    <option value="AQ">Antarctica</option>
                    <option value="AG">Antigua and Barbuda</option>
                    <option value="AR">Argentina</option>
                    <option value="AM">Armenia</option>
                    <option value="AW">Aruba</option>
                    <option value="AU">Australia</option>
                    <option value="AT">Austria</option>
                    <option value="AZ">Azerbaijan</option>
                    <option value="BS">Bahamas</option>
                    <option value="BH">Bahrain</option>
                    <option value="BD">Bangladesh</option>
                    <option value="BB">Barbados</option>
                    <option value="BY">Belarus</option>
                    <option value="BE">Belgium</option>
                    <option value="BZ">Belize</option>
                    <option value="BJ">Benin</option>
                    <option value="BM">Bermuda</option>
                    <option value="BT">Bhutan</option>
                    <option value="BO">Bolivia</option>
                    <option value="BQ">Bonaire, Sint Eustatius and Saba</option>
                    <option value="BA">Bosnia and Herzegovina</option>
                    <option value="BW">Botswana</option>
                    <option value="BV">Bouvet Island</option>
                    <option value="BR">Brazil</option>
                    <option value="IO">British Indian Ocean Territory</option>
                    <option value="BN">Brunei Darussalam</option>
                    <option value="BG">Bulgaria</option>
                    <option value="BF">Burkina Faso</option>
                    <option value="BI">Burundi</option>
                    <option value="CV">Cabo Verde</option>
                    <option value="KH">Cambodia</option>
                    <option value="CM">Cameroon</option>
                    <option value="CA">Canada</option>
                    <option value="KY">Cayman Islands</option>
                    <option value="CF">Central African Republic</option>
                    <option value="TD">Chad</option>
                    <option value="CL">Chile</option>
                    <option value="CN">China</option>
                    <option value="CX">Christmas Island</option>
                    <option value="CC">Cocos (Keeling) Islands</option>
                    <option value="CO">Colombia</option>
                    <option value="KM">Comoros</option>
                    <option value="CG">Congo</option>
                    <option value="CD">Congo, Democratic Republic</option>
                    <option value="CK">Cook Islands</option>
                    <option value="CR">Costa Rica</option>
                    <option value="CI">Côte d'Ivoire</option>
                    <option value="HR">Croatia</option>
                    <option value="CU">Cuba</option>
                    <option value="CW">Curaçao</option>
                    <option value="CY">Cyprus</option>
                    <option value="CZ">Czechia</option>
                    <option value="DK">Denmark</option>
                    <option value="DJ">Djibouti</option>
                    <option value="DM">Dominica</option>
                    <option value="DO">Dominican Republic</option>
                    <option value="EC">Ecuador</option>
                    <option value="EG">Egypt</option>
                    <option value="SV">El Salvador</option>
                    <option value="GQ">Equatorial Guinea</option>
                    <option value="ER">Eritrea</option>
                    <option value="EE">Estonia</option>
                    <option value="SZ">Eswatini</option>
                    <option value="ET">Ethiopia</option>
                    <option value="FK">Falkland Islands (Malvinas)</option>
                    <option value="FO">Faroe Islands</option>
                    <option value="FJ">Fiji</option>
                    <option value="FI">Finland</option>
                    <option value="FR">France</option>
                    <option value="GF">French Guiana</option>
                    <option value="PF">French Polynesia</option>
                    <option value="TF">French Southern Territories</option>
                    <option value="GA">Gabon</option>
                    <option value="GM">Gambia</option>
                    <option value="GE">Georgia</option>
                    <option value="DE">Germany</option>
                    <option value="GH">Ghana</option>
                    <option value="GI">Gibraltar</option>
                    <option value="GR">Greece</option>
                    <option value="GL">Greenland</option>
                    <option value="GD">Grenada</option>
                    <option value="GP">Guadeloupe</option>
                    <option value="GU">Guam</option>
                    <option value="GT">Guatemala</option>
                    <option value="GG">Guernsey</option>
                    <option value="GN">Guinea</option>
                    <option value="GW">Guinea-Bissau</option>
                    <option value="GY">Guyana</option>
                    <option value="HT">Haiti</option>
                    <option value="HM">Heard Island & McDonald Islands</option>
                    <option value="VA">Holy See (Vatican City State)</option>
                    <option value="HN">Honduras</option>
                    <option value="HK">Hong Kong</option>
                    <option value="HU">Hungary</option>
                    <option value="IS">Iceland</option>
                    <option value="IN">India</option>
                    <option value="ID">Indonesia</option>
                    <option value="IR">Iran, Islamic Republic Of</option>
                    <option value="IQ">Iraq</option>
                    <option value="IE">Ireland</option>
                    <option value="IM">Isle of Man</option>
                    <option value="IL">Israel</option>
                    <option value="IT">Italy</option>
                    <option value="JM">Jamaica</option>
                    <option value="JP">Japan</option>
                    <option value="JE">Jersey</option>
                    <option value="JO">Jordan</option>
                    <option value="KZ">Kazakhstan</option>
                    <option value="KE">Kenya</option>
                    <option value="KI">Kiribati</option>
                    <option value="KR">Korea</option>
                    <option value="KW">Kuwait</option>
                    <option value="KG">Kyrgyzstan</option>
                    <option value="LA">Lao People's Democratic Republic</option>
                    <option value="LV">Latvia</option>
                    <option value="LB">Lebanon</option>
                    <option value="LS">Lesotho</option>
                    <option value="LR">Liberia</option>
                    <option value="LY">Libyan Arab Jamahiriya</option>
                    <option value="LI">Liechtenstein</option>
                    <option value="LT">Lithuania</option>
                    <option value="LU">Luxembourg</option>
                    <option value="MO">Macao</option>
                    <option value="MK">Macedonia</option>
                    <option value="MG">Madagascar</option>
                    <option value="MW">Malawi</option>
                    <option value="MY">Malaysia</option>
                    <option value="MV">Maldives</option>
                    <option value="ML">Mali</option>
                    <option value="MT">Malta</option>
                    <option value="MH">Marshall Islands</option>
                    <option value="MQ">Martinique</option>
                    <option value="MR">Mauritania</option>
                    <option value="MU">Mauritius</option>
                    <option value="YT">Mayotte</option>
                    <option value="MX">Mexico</option>
                    <option value="FM">Micronesia, Federated States Of</option>
                    <option value="MD">Moldova</option>
                    <option value="MC">Monaco</option>
                    <option value="MN">Mongolia</option>
                    <option value="ME">Montenegro</option>
                    <option value="MS">Montserrat</option>
                    <option value="MA">Morocco</option>
                    <option value="MZ">Mozambique</option>
                    <option value="MM">Myanmar</option>
                    <option value="NA">Namibia</option>
                    <option value="NR">Nauru</option>
                    <option value="NP">Nepal</option>
                    <option value="NL">Netherlands</option>
                    <option value="NC">New Caledonia</option>
                    <option value="NZ">New Zealand</option>
                    <option value="NI">Nicaragua</option>
                    <option value="NE">Niger</option>
                    <option value="NG">Nigeria</option>
                    <option value="NU">Niue</option>
                    <option value="NF">Norfolk Island</option>
                    <option value="MP">Northern Mariana Islands</option>
                    <option value="NO">Norway</option>
                    <option value="OM">Oman</option>
                    <option value="PK">Pakistan</option>
                    <option value="PW">Palau</option>
                    <option value="PS">Palestinian Territory, Occupied</option>
                    <option value="PA">Panama</option>
                    <option value="PG">Papua New Guinea</option>
                    <option value="PY">Paraguay</option>
                    <option value="PE">Peru</option>
                    <option value="PH">Philippines</option>
                    <option value="PN">Pitcairn</option>
                    <option value="PL">Poland</option>
                    <option value="PT">Portugal</option>
                    <option value="PR">Puerto Rico</option>
                    <option value="QA">Qatar</option>
                    <option value="RE">Reunion</option>
                    <option value="RO">Romania</option>
                    <option value="RU">Russia</option>
                    <option value="RW">Rwanda</option>
                    <option value="BL">Saint Barthelemy</option>
                    <option value="SH">Saint Helena</option>
                    <option value="KN">Saint Kitts And Nevis</option>
                    <option value="LC">Saint Lucia</option>
                    <option value="MF">Saint Martin</option>
                    <option value="PM">Saint Pierre And Miquelon</option>
                    <option value="VC">Saint Vincent And Grenadines</option>
                    <option value="WS">Samoa</option>
                    <option value="SM">San Marino</option>
                    <option value="ST">Sao Tome And Principe</option>
                    <option value="SA">Saudi Arabia</option>
                    <option value="SN">Senegal</option>
                    <option value="RS">Serbia</option>
                    <option value="SC">Seychelles</option>
                    <option value="SL">Sierra Leone</option>
                    <option value="SG">Singapore</option>
                    <option value="SX">Sint Maarten (Dutch part)</option>
                    <option value="SK">Slovakia</option>
                    <option value="SI">Slovenia</option>
                    <option value="SB">Solomon Islands</option>
                    <option value="SO">Somalia</option>
                    <option value="ZA">South Africa</option>
                    <option value="GS">South Georgia And Sandwich Isl.</option>
                    <option value="KR">South Korea</option>
                    <option value="SS">South Sudan</option>
                    <option value="ES">Spain</option>
                    <option value="LK">Sri Lanka</option>
                    <option value="SD">Sudan</option>
                    <option value="SR">Suriname</option>
                    <option value="SJ">Svalbard And Jan Mayen</option>
                    <option value="SZ">Swaziland</option>
                    <option value="SE">Sweden</option>
                    <option value="CH">Switzerland</option>
                    <option value="SY">Syrian Arab Republic</option>
                    <option value="TW">Taiwan</option>
                    <option value="TJ">Tajikistan</option>
                    <option value="TZ">Tanzania</option>
                    <option value="TH">Thailand</option>
                    <option value="TL">Timor-Leste</option>
                    <option value="TG">Togo</option>
                    <option value="TK">Tokelau</option>
                    <option value="TO">Tonga</option>
                    <option value="TT">Trinidad And Tobago</option>
                    <option value="TN">Tunisia</option>
                    <option value="TR">Turkey</option>
                    <option value="TM">Turkmenistan</option>
                    <option value="TC">Turks And Caicos Islands</option>
                    <option value="TV">Tuvalu</option>
                    <option value="UG">Uganda</option>
                    <option value="UA">Ukraine</option>
                    <option value="AE">United Arab Emirates</option>
                    <option value="GB">United Kingdom</option>
                    <option value="US" selected>United States</option>
                    <option value="UM">United States Outlying Islands</option>
                    <option value="UY">Uruguay</option>
                    <option value="UZ">Uzbekistan</option>
                    <option value="VU">Vanuatu</option>
                    <option value="VE">Venezuela</option>
                    <option value="VN">Viet Nam</option>
                    <option value="VG">Virgin Islands, British</option>
                    <option value="VI">Virgin Islands, U.S.</option>
                    <option value="WF">Wallis And Futuna</option>
                    <option value="EH">Western Sahara</option>
                    <option value="YE">Yemen</option>
                    <option value="ZM">Zambia</option>
                    <option value="ZW">Zimbabwe</option>
                </select>
            </div>
            <div class="input-group">
                <label for="state">State</label>
                <select id="state" name="state">
                    <option value="">Select State</option>
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                    <option value="AZ">Arizona</option>
                    <option value="AR">Arkansas</option>
                    <option value="CA">California</option>
                    <option value="CO">Colorado</option>
                    <option value="CT">Connecticut</option>
                    <option value="DE">Delaware</option>
                    <option value="FL">Florida</option>
                    <option value="GA">Georgia</option>
                    <option value="HI">Hawaii</option>
                    <option value="ID">Idaho</option>
                    <option value="IL">Illinois</option>
                    <option value="IN">Indiana</option>
                    <option value="IA">Iowa</option>
                    <option value="KS">Kansas</option>
                    <option value="KY">Kentucky</option>
                    <option value="LA">Louisiana</option>
                    <option value="ME">Maine</option>
                    <option value="MD">Maryland</option>
                    <option value="MA">Massachusetts</option>
                    <option value="MI">Michigan</option>
                    <option value="MN">Minnesota</option>
                    <option value="MS">Mississippi</option>
                    <option value="MO">Missouri</option>
                    <option value="MT">Montana</option>
                    <option value="NE">Nebraska</option>
                    <option value="NV">Nevada</option>
                    <option value="NH">New Hampshire</option>
                    <option value="NJ">New Jersey</option>
                    <option value="NM">New Mexico</option>
                    <option value="NY">New York</option>
                    <option value="NC">North Carolina</option>
                    <option value="ND">North Dakota</option>
                    <option value="OH">Ohio</option>
                    <option value="OK">Oklahoma</option>
                    <option value="OR">Oregon</option>
                    <option value="PA">Pennsylvania</option>
                    <option value="RI">Rhode Island</option>
                    <option value="SC">South Carolina</option>
                    <option value="SD">South Dakota</option>
                    <option value="TN">Tennessee</option>
                    <option value="TX">Texas</option>
                    <option value="UT">Utah</option>
                    <option value="VT">Vermont</option>
                    <option value="VA">Virginia</option>
                    <option value="WA">Washington</option>
                    <option value="WV">West Virginia</option>
                    <option value="WI">Wisconsin</option>
                    <option value="WY">Wyoming</option>
                </select>
            </div>
            <div class="input-group" style="position:relative;">
                <label for="city">City</label>
                <input type="text" id="city" name="city" placeholder="e.g. Los Angeles" autocomplete="off" oninput="suggestCity()">
                <div id="city-suggestions" style="position:absolute;top:100%;left:0;width:100%;background:white;border:1px solid #ddd;z-index:10;display:none;max-height:150px;overflow-y:auto;border-radius:0 0 8px 8px;"></div>
            </div>
            <div class="input-group">
                <label for="zip">ZIP</label>
                <div style="display:flex;gap:8px;align-items:center;">
                    <input type="text" id="zip" name="zip" placeholder="e.g. 90210" style="flex:1;">
                    <button class="btn" type="button" onclick="lookupByZip()" title="Lookup by ZIP">Lookup</button>
                </div>
            </div>
            <div class="input-group">
                <label for="units">Units</label>
                <select id="units" name="units">
                    <option value="metric">Celsius (°C)</option>
                    <option value="imperial">Fahrenheit (°F)</option>
                    <option value="standard">Kelvin (K)</option>
                </select>
            </div>
            <div class="input-group">
                <label for="favorites">Favorites</label>
                <div style="display:flex;gap:8px;align-items:center;">
                    <select id="favorites" name="favorites" style="flex:1;min-width:120px;"></select>
                    <button class="btn" type="button" onclick="saveFavorite()" title="Save favorite"><span style="font-size:1.1em;">★</span></button>
                    <button class="btn" type="button" onclick="deleteFavorite()" title="Delete favorite" style="background:#e74c3c;">✖</button>
                </div>
            </div>
        </div>
        <div class="buttons">
            <button class="btn" type="button" onclick="getWeather()">Current</button>
            <button class="btn" type="button" onclick="getForecast()">Forecast</button>
            <button class="btn" type="button" onclick="getAirQuality()">Air Quality</button>
            <button class="btn" type="button" onclick="getUV()">UV Index</button>
            <button class="btn" type="button" onclick="getAlerts()">Alerts</button>
            <button class="btn" type="button" onclick="openRadarMap()">US RadarMap</button>
            <button class="btn" type="button" onclick="showAbout()">About</button>
        </div>
        <div id="radar-map-container" style="display:none;margin-top:20px;"></div>
        <div class="result-area" id="result-area">Select a state and city, then choose a feature.</div>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </div>
    <div class="modal" id="about-modal" style="display:none;position:fixed;z-index:1000;left:0;top:0;width:100vw;height:100vh;background:rgba(0,0,0,0.4);">
        <div class="modal-content" style="background:white;border-radius:12px;max-width:400px;margin:60px auto;padding:32px;box-shadow:0 8px 32px rgba(0,0,0,0.2);position:relative;">
            <span class="modal-close" onclick="closeAbout()" style="position:absolute;top:12px;right:18px;font-size:2em;cursor:pointer;color:#0984e3;">&times;</span>
            <h2 style="color:#0984e3;margin-top:0;">About Weather Alert Pro</h2>
            <p><b>Version:</b> 1.0.1<br>
            <b>Author:</b> Donald Bryant<br>
            <b>License:</b> <a href="/static/LICENSE" target="_blank" style="color:#2926ad;text-decoration:underline;">MIT License</a><br>
            <b>Copyright:</b> © 2025 Donald Bryant</p>
            <p>Professional weather application with real-time data, forecasts, radar, air quality, UV index, and more.<br>
            Powered by OpenWeatherMap and NOAA.</p>
        </div>
    </div>
    <script>
        const API_PREFIX = '/cgi-bin/weather.cgi';

        let cityData = {};
        fetch('/cgi-bin/static/us_states_cities.json')
            .then(resp => resp.json())
            .then(data => { cityData = data; })
            .catch(err => { console.error('Failed to load city data:', err); });

        // --- Country Capitals Autofill ---
        let countryCapitals = {};
        fetch('/cgi-bin/static/country_capitals.json')
            .then(resp => resp.json())
            .then(data => { countryCapitals = data; })
            .catch(err => { console.error('Failed to load country capitals:', err); });

        document.getElementById('country').addEventListener('change', function() {
            const countryCode = this.value;
            const capital = countryCapitals[countryCode];
            if (capital) {
                // Only autofill if city field is empty or matches previous capital
                const cityInput = document.getElementById('city');
                if (!cityInput.value || Object.values(countryCapitals).includes(cityInput.value)) {
                    cityInput.value = capital;
                }
            }
        });
        // --- ZIP Code Lookup ---
        function lookupByZip() {
            const zip = document.getElementById('zip').value.trim();
            if (!zip) {
                alert('Please enter a ZIP code.');
                return;
            }
            document.getElementById('result-area').innerHTML = 'Looking up ZIP...';
            // Lookup city/state from Zippopotam.us
            fetch(`https://api.zippopotam.us/us/${zip}`)
                .then(resp => {
                    if (!resp.ok) throw new Error('ZIP code not found');
                    return resp.json();
                })
                .then(data => {
                    // Get city and state abbreviation
                    const place = data.places[0];
                    const city = place["place name"];
                    const stateAbbr = place["state abbreviation"];
                    // Set city and state fields
                    document.getElementById('city').value = city;
                    document.getElementById('state').value = stateAbbr;
                    // Now fetch weather for this city/state/zip
                    let units = document.getElementById('units').value;
                    let reqData = { city: city, state: stateAbbr, zip_code: zip, units };
                    document.getElementById('result-area').innerHTML = 'Loading...';
                    fetch(`${API_PREFIX}/api/weather`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(reqData)
                    })
                    .then(r => r.json())
                    .then(res => {
                        if (res.success) {
                            document.getElementById('result-area').innerHTML = formatResult(res.data, '/api/weather');
                        } else {
                            document.getElementById('result-area').innerHTML = '<span style="color:#b33">' + (res.error || 'Error') + '</span>';
                        }
                    })
                    .catch(e => {
                        document.getElementById('result-area').innerHTML = '<span style="color:#b33">' + e + '</span>';
                    });
                })
                .catch(err => {
                    document.getElementById('result-area').innerHTML = `<span style='color:#b33'>ZIP code not found.</span>`;
                });
        }
        // --- City Suggestion ---
        // For demo: a small sample, but you can load a larger list from us_states_cities.json if desired
        function suggestCity() {
            const state = document.getElementById('state').value;
            const input = document.getElementById('city').value.trim().toLowerCase();
            const suggestionsDiv = document.getElementById('city-suggestions');
            suggestionsDiv.innerHTML = '';
            if (!state || !cityData[state] || !input) {
                suggestionsDiv.style.display = 'none';
                return;
            }
            const matches = cityData[state].filter(city => city.toLowerCase().startsWith(input));
            if (matches.length === 0) {
                suggestionsDiv.style.display = 'none';
                return;
            }
            for (const city of matches) {
                const div = document.createElement('div');
                div.textContent = city;
                div.style.padding = '8px 12px';
                div.style.cursor = 'pointer';
                div.onmousedown = function() {
                    document.getElementById('city').value = city;
                    suggestionsDiv.style.display = 'none';
                };
                suggestionsDiv.appendChild(div);
            }
            suggestionsDiv.style.display = 'block';
        }
        document.addEventListener('click', function(e) {
            if (!e.target.closest('#city-suggestions') && e.target.id !== 'city') {
                document.getElementById('city-suggestions').style.display = 'none';
            }
        });
        // --- Favorites Management ---
        function getFavorites() {
            let favs = localStorage.getItem('weather_favorites');
            return favs ? JSON.parse(favs) : {};
        }
        function saveFavorite() {
            let city = document.getElementById('city').value.trim();
            let state = document.getElementById('state').value.trim();
            if (!city || !state) { alert('Please enter both city and state.'); return; }
            let favs = getFavorites();
            let key = city + ', ' + state;
            favs[key] = { city, state };
            localStorage.setItem('weather_favorites', JSON.stringify(favs));
            updateFavoritesDropdown();
            alert('Favorite saved!');
        }
        function deleteFavorite() {
            let sel = document.getElementById('favorites');
            let key = sel.value;
            if (!key) { alert('Select a favorite to delete.'); return; }
            let favs = getFavorites();
            delete favs[key];
            localStorage.setItem('weather_favorites', JSON.stringify(favs));
            updateFavoritesDropdown();
            alert('Favorite deleted!');
        }
        function updateFavoritesDropdown() {
            let sel = document.getElementById('favorites');
            let favs = getFavorites();
            sel.innerHTML = '';
            let keys = Object.keys(favs);
            if (keys.length === 0) {
                sel.innerHTML = '<option value="">No favorites saved</option>';
            } else {
                sel.innerHTML = '<option value="">Select Favorite</option>';
                for (let k of keys) {
                    let opt = document.createElement('option');
                    opt.value = k;
                    opt.textContent = k;
                    sel.appendChild(opt);
                }
            }
        }
        document.getElementById('favorites').addEventListener('change', function() {
            let favs = getFavorites();
            let key = this.value;
            if (favs[key]) {
                document.getElementById('city').value = favs[key].city;
                document.getElementById('state').value = favs[key].state;
            }
        });
        updateFavoritesDropdown();
        // --- About Modal ---
        function showAbout() {
            document.getElementById('about-modal').style.display = 'block';
        }
        function closeAbout() {
            document.getElementById('about-modal').style.display = 'none';
        }
        window.onclick = function(event) {
            let modal = document.getElementById('about-modal');
            if (event.target == modal) { modal.style.display = 'none'; }
        }
        // --- Radar Map ---
        function openRadarMap() {
            window.open('https://radar.weather.gov/', '_blank', 'noopener');
        }
        // --- API Calls ---
        function getWeather() {
            apiCall(`${API_PREFIX}/api/weather`);
        }
        function getForecast() {
            apiCall(`${API_PREFIX}/api/forecast`);
        }
        function getAirQuality() {
            apiCall(`${API_PREFIX}/api/air_quality`);
        }
        function getUV() {
            apiCall(`${API_PREFIX}/api/uv`);
        }
        function getAlerts() {
            apiCall(`${API_PREFIX}/api/alerts`);
        }
        function apiCall(endpoint) {
    let city = document.getElementById('city').value.trim();
    let state = document.getElementById('state').value.trim();
    let zip = document.getElementById('zip').value.trim();
    let units = document.getElementById('units').value;

    // Prevent API call if all fields are empty
    if (!city && !state && !zip) {
        document.getElementById('result-area').innerHTML = '<span style="color:#b33;">Please enter a city, state, or ZIP code.</span>';
        return;
    }

    let data = { city, state, zip_code: zip, units };
    document.getElementById('result-area').innerHTML = 'Loading...';
    fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(r => r.json())
    .then(res => {
        if (res.success) {
            document.getElementById('result-area').innerHTML = formatResult(res.data, endpoint);
        } else {
            document.getElementById('result-area').innerHTML = '<span style="color:#b33">' + (res.error || 'Error') + '</span>';
        }
    })
    .catch(e => {
        document.getElementById('result-area').innerHTML = '<span style="color:#b33">' + e + '</span>';
    });
}
        function formatResult(data, endpoint) {
            if (endpoint.endsWith('/api/weather')) {
    let c = data.current;
    let location = data.location || {};
    let cityInput = document.getElementById('city').value.trim();
    let stateInput = document.getElementById('state').value;
    let stateText = '';
    if (stateInput) {
        let stateSel = document.getElementById('state');
        stateText = stateSel.options[stateSel.selectedIndex].text;
    }
    let cityName = location.city || cityInput || 'Current Location';
    let stateName = location.state || stateText || '';
    let icon = c.weather && c.weather[0].icon ? c.weather[0].icon : '';
    let description = c.weather && c.weather[0].description ? c.weather[0].description : '';
    // --- FIX: Proper temperature formatting ---
    let units = document.getElementById('units').value;
    let tempStr, feelsLikeStr;
    if (units === 'imperial') {
        tempStr = `${Math.round(c.temp)}°F`;
        feelsLikeStr = `${Math.round(c.feels_like)}°F`;
    } else if (units === 'metric') {
        tempStr = `${Math.round(c.temp)}°C`;
        feelsLikeStr = `${Math.round(c.feels_like)}°C`;
    } else {
        tempStr = `${Math.round(c.temp)} K`;
        feelsLikeStr = `${Math.round(c.feels_like)} K`;
    }
    return `
        <div style="text-align:center;margin-bottom:8px;font-size:1.2em;"><b>${cityName}${stateName ? ', ' + stateName : ''}</b></div>
        <div class="weather-display">
            <div class="weather-card" style="text-align:center;">
                ${icon ? `<img src='https://openweathermap.org/img/wn/${icon}@2x.png' alt='${description}' style='width:80px;height:80px;'>` : ''}
                <div style="font-size:1.1em;color:#636e72;margin-bottom:0.5em;">${description.charAt(0).toUpperCase() + description.slice(1)}</div>
                <h3>🌡️ Current Temperature</h3>
                <p><strong>Temperature:</strong> ${tempStr}</p>
                <p><strong>Feels Like:</strong> ${feelsLikeStr}</p>
            </div>
            <div class="weather-card">
                <h3>💨 Wind & Atmosphere</h3>
                <p><strong>Wind Speed:</strong> ${c.wind_speed_mph !== undefined ? c.wind_speed_mph + ' mph' : (c.wind_speed + ' m/s')}</p>
                <p><strong>Wind Direction:</strong> ${c.wind_direction_degrees !== undefined ? c.wind_direction_degrees + '°' : 'N/A'} (${c.wind_direction_compass || 'N/A'})</p>
                <p><strong>Humidity:</strong> ${c.humidity}%</p>
                <p><strong>Pressure:</strong> ${c.pressure_inhg !== undefined ? c.pressure_inhg + ' inHg' : (c.pressure + ' hPa')}</p>
            </div>
            <div class="weather-card">
                <h3>☀️ Additional Data</h3>
                <p><strong>UVI:</strong> ${c.uvi}</p>
                <p><strong>Dew Point:</strong> ${c.dew_point !== undefined ? Math.round(c.dew_point) + (units === 'imperial' ? '°F' : units === 'metric' ? '°C' : 'K') : 'N/A'}</p>
                <p><strong>Visibility:</strong> ${c.visibility !== undefined ? (units === 'imperial' ? (Math.round(c.visibility / 1609.34 * 10) / 10 + ' mi') : (Math.round(c.visibility / 100) / 10 + ' km')) : 'N/A'}</p>
                <p><strong>Cloud Cover:</strong> ${c.clouds !== undefined ? c.clouds + '%' : 'N/A'}</p>
                <p><strong>Sunrise:</strong> ${c.sunrise ? new Date(c.sunrise * 1000).toLocaleTimeString() : 'N/A'}</p>
                <p><strong>Sunset:</strong> ${c.sunset ? new Date(c.sunset * 1000).toLocaleTimeString() : 'N/A'}</p>
                <p><strong>Time:</strong> ${new Date(c.dt*1000).toLocaleString()}</p>
                ${c.rain && c.rain['1h'] ? `<p><strong>Rain (last hour):</strong> ${c.rain['1h']} mm</p>` : ''}
                ${c.snow && c.snow['1h'] ? `<p><strong>Snow (last hour):</strong> ${c.snow['1h']} mm</p>` : ''}
            </div>
        </div>
    `;
            } else if (endpoint.endsWith('/api/forecast')) {
                let d = data.daily;
                let h = data.hourly;
                let html = `<b>5-Day Forecast</b><br>`;
                for (let day of d) {
                    html += `${new Date(day.dt*1000).toLocaleDateString()}: ${day.weather[0].description}, High: ${day.temp.max}°, Low: ${day.temp.min}°<br>`;
                }
                html += `<br><b>24-Hour Hourly</b><br>`;
                for (let hour of h) {
                    html += `${new Date(hour.dt*1000).getHours()}:00 - ${hour.temp}°<br>`;
                }
                return html;
            } else if (endpoint.endsWith('/api/air_quality')) {
                let a = data.data.list[0];
                return `<b>Air Quality</b><br>
                    AQI: ${a.main.aqi}<br>
                    CO: ${a.components.co} μg/m³<br>
                    NO: ${a.components.no} μg/m³<br>
                    NO₂: ${a.components.no2} μg/m³<br>
                    O₃: ${a.components.o3} μg/m³<br>
                    SO₂: ${a.components.so2} μg/m³<br>
                    PM2.5: ${a.components.pm2_5} μg/m³<br>
                    PM10: ${a.components.pm10} μg/m³<br>
                    NH₃: ${a.components.nh3} μg/m³`;
            } else if (endpoint.endsWith('/api/uv')) {
    let u = data.uvi;
    let sunrise = data.sunrise;
    let sunset = data.sunset;
    let clouds = data.clouds;
    let humidity = data.humidity;
    let pressure = data.pressure;
    let now = Math.floor(Date.now() / 1000);
    let displayUVI = u;
    let note = '';
    if (sunrise && sunset && (now < sunrise || now > sunset)) {
        displayUVI = 0;
        note = ' (Nighttime)';
    }
    // UV level and color
    let uvLevel = 'Low';
    let uvColor = '#289500';
    if (displayUVI >= 3 && displayUVI < 6) {
        uvLevel = 'Moderate';
        uvColor = '#f7e400';
    } else if (displayUVI >= 6 && displayUVI < 8) {
        uvLevel = 'High';
        uvColor = '#f85900';
    } else if (displayUVI >= 8 && displayUVI < 11) {
        uvLevel = 'Very High';
        uvColor = '#d8001d';
    } else if (displayUVI >= 11) {
        uvLevel = 'Extreme';
        uvColor = '#6b49c8';
    }
    function getUVProtection(uvi) {
        if (uvi < 3) return 'No protection required';
        if (uvi < 6) return 'Wear sunglasses on bright days';
        if (uvi < 8) return 'Seek shade, wear sunscreen and protective clothing';
        if (uvi < 11) return 'Avoid being outside during midday hours';
        return 'Take all precautions - avoid sun exposure';
    }
    // Get city/state for header
    let cityInput = document.getElementById('city').value.trim();
    let stateInput = document.getElementById('state').value;
    let stateText = '';
    if (stateInput) {
        let stateSel = document.getElementById('state');
        stateText = stateSel.options[stateSel.selectedIndex].text;
    }
    let cityName = cityInput || 'Current Location';
    let stateName = stateText || '';
    return `
        <div style="text-align:center;margin-bottom:8px;font-size:1.2em;"><b>${cityName}${stateName ? ', ' + stateName : ''}</b></div>
        <div class="weather-display">
            <div class="weather-card">
                <h3>☀️ UV Index</h3>
                <p style="font-size:2em;margin:0.2em 0;"><span style="color: ${uvColor}; font-weight: bold;">${displayUVI}</span> <span style="font-size:0.7em;">(${uvLevel})${note}</span></p>
                <p><strong>Protection:</strong> ${getUVProtection(displayUVI)}</p>
                <p><strong>Cloud Cover:</strong> ${clouds !== undefined ? clouds + '%' : 'N/A'}</p>
                <p><strong>Humidity:</strong> ${humidity !== undefined ? humidity + '%' : 'N/A'}</p>
                <p><strong>Pressure:</strong> ${pressure !== undefined ? (pressure * 0.02953).toFixed(2) + ' inHg' : 'N/A'}</p>
                <p><strong>Sunrise:</strong> ${sunrise ? new Date(sunrise * 1000).toLocaleTimeString() : 'N/A'}</p>
                <p><strong>Sunset:</strong> ${sunset ? new Date(sunset * 1000).toLocaleTimeString() : 'N/A'}</p>
                <p><strong>Time:</strong> ${new Date().toLocaleString()}</p>
            </div>
        </div>
    `;
            } else if (endpoint.endsWith('/api/alerts')) {
                let alerts = data.alerts;
                if (!alerts || alerts.length === 0) return 'No active weather alerts.';
                let html = `<b>Weather Alerts</b><br>`;
                for (let a of alerts) {
                    html += `<b>${a.event}</b>: ${a.description}<br>`;
                }
                return html;
            }
            return JSON.stringify(data);
        }
    </script>
    <script>
        // Show/hide loading indicator
        function showLoading() {
            // No element with id 'loading' or 'results', so just show loading in result-area
            document.getElementById('result-area').innerHTML = 'Loading...';
        }
        function hideLoading() {
            // No-op, handled by each display function
        }
        // Get 5-day forecast
        async function getForecast() {
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value;
            const zip = document.getElementById('zip').value.trim();
            if (!city && !zip) {
                document.getElementById('result-area').innerHTML = '<p class="error">Please enter a city name or ZIP code.</p>';
                return;
            }
            showLoading();
            try {
                const response = await fetch(`${API_PREFIX}/api/forecast`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        city: city,
                        state: state,
                        zip_code: zip
                    })
                });
                const data = await response.json();
                // hideLoading();
                if (data.success) {
                    displayForecast(data.data);
                } else {
                    document.getElementById('result-area').innerHTML = `<p class="error">Error: ${data.error}</p>`;
                }
            } catch (error) {
                // hideLoading();
                document.getElementById('result-area').innerHTML = `<p class="error">Network Error: ${error.message}</p>`;
            }
        }
        // Display forecast data
        function displayForecast(forecastData) {
    const daily = forecastData.daily;
    const hourly = forecastData.hourly;
    const units = forecastData.units || 'imperial'; // Get units from backend
    // Get city/state for header
    let cityInput = document.getElementById('city').value.trim();
    let stateInput = document.getElementById('state').value;
    let stateText = '';
    if (stateInput) {
        let stateSel = document.getElementById('state');
        stateText = stateSel.options[stateSel.selectedIndex].text;
    }
    let cityName = cityInput || 'Current Location';
    let stateName = stateText || '';
    let unitSymbol = units === 'imperial' ? '°F' : units === 'metric' ? '°C' : 'K';

    let forecastHtml = `<div style="text-align:center;margin-bottom:8px;font-size:1.2em;"><b>${cityName}${stateName ? ', ' + stateName : ''}</b></div>`;
    forecastHtml += `<div class="weather-display">`;
    // 5-day forecast cards with weather icons
    daily.forEach((day, index) => {
        const date = new Date(day.dt * 1000);
        const dayName = index === 0 ? 'Today' : date.toLocaleDateString('en-US', { weekday: 'long' });
        const tempMax = Math.round(day.temp.max);
        const tempMin = Math.round(day.temp.min);
        const description = day.weather[0].description;
        const icon = day.weather[0].icon;
        forecastHtml += `
            <div class="weather-card">
                <h3>${dayName}</h3>
                <img src="https://openweathermap.org/img/wn/${icon}@2x.png" alt="${description}" style="width:60px;height:60px;">
                <p><strong>High:</strong> ${tempMax}${unitSymbol}</p>
                <p><strong>Low:</strong> ${tempMin}${unitSymbol}</p>
                <p><strong>Weather:</strong> ${description}</p>
                <p><strong>Humidity:</strong> ${day.humidity}%</p>
            </div>
        `;
    });
    forecastHtml += `</div>`; // Close .weather-display for forecast cards

    // 24-hour temperature graph
    forecastHtml += `
        <div class="weather-card" style="margin-top:24px;">
            <h3>24-Hour Temperature</h3>
            <canvas id="hourlyTempChart" height="80"></canvas>
        </div>
    `;

    document.getElementById('result-area').innerHTML = forecastHtml;
    // Prepare data for Chart.js
    if (hourly && Array.isArray(hourly)) {
        const hours = hourly.slice(0, 24).map(h => {
            const d = new Date(h.dt * 1000);
            return d.getHours() + ':00';
        });
        const temps = hourly.slice(0, 24).map(h => h.temp);
        setTimeout(() => {
            const ctx = document.getElementById('hourlyTempChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: hours,
                    datasets: [{
                        label: `Temp (${unitSymbol})`,
                        data: temps,
                        borderColor: '#0984e3',
                        backgroundColor: 'rgba(9,132,227,0.1)',
                        fill: true,
                        tension: 0.3,
                        pointRadius: 4,
                        pointBackgroundColor: '#0984e3',
                        pointHoverRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const idx = context.dataIndex;
                                    return `Temp: ${temps[idx]}${unitSymbol}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: { display: true, text: 'Hour' }
                        },
                        y: {
                            title: { display: true, text: unitSymbol },
                            beginAtZero: false
                        }
                    }
                }
            });
        }, 100);
    }
}
        // Get air quality data
        async function getAirQuality() {
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value;
            const zip = document.getElementById('zip').value.trim();
            if (!city && !zip) {
                document.getElementById('result-area').innerHTML = '<p class="error">Please enter a city name or ZIP code.</p>';
                return;
            }
            showLoading();
            try {
                const response = await fetch(`${API_PREFIX}/api/air_quality`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        city: city,
                        state: state,
                        zip_code: zip
                    })
                });
                const data = await response.json();
                // hideLoading();
                if (data.success) {
                    displayAirQuality(data.data);
                } else {
                    document.getElementById('result-area').innerHTML = `<p class="error">Error: ${data.error}</p>`;
                }
            } catch (error) {
                // hideLoading();
                document.getElementById('result-area').innerHTML = `<p class="error">Network Error: ${error.message}</p>`;
            }
        }
        // Display air quality data
        function displayAirQuality(airData) {
            const aqi = airData.list[0].main.aqi;
            const components = airData.list[0].components;
            const aqiLevels = ['Good', 'Fair', 'Moderate', 'Poor', 'Very Poor'];
            const aqiLevel = aqiLevels[aqi - 1] || 'Unknown';
            // Get city/state for header
            let cityInput = document.getElementById('city').value.trim();
            let stateInput = document.getElementById('state').value;
            let stateText = '';
            if (stateInput) {
                let stateSel = document.getElementById('state');
                stateText = stateSel.options[stateSel.selectedIndex].text;
            }
            let cityName = cityInput || 'Current Location';
            let stateName = stateText || '';
            document.getElementById('result-area').innerHTML = `
                <div style="text-align:center;margin-bottom:8px;font-size:1.2em;"><b>${cityName}${stateName ? ', ' + stateName : ''}</b></div>
                <div class="weather-display">
                    <div class="weather-card">
                        <h3>🌬️ Air Quality Index</h3>
                        <p><strong>AQI Level:</strong> ${aqi} (${aqiLevel})</p>
                        <p><strong>CO:</strong> ${components.co} μg/m³</p>
                        <p><strong>NO₂:</strong> ${components.no2} μg/m³</p>
                        <p><strong>O₃:</strong> ${components.o3} μg/m³</p>
                    </div>
                    <div class="weather-card">
                        <h3>🏭 Particulate Matter</h3>
                        <p><strong>PM2.5:</strong> ${components.pm2_5} μg/m³</p>
                        <p><strong>PM10:</strong> ${components.pm10} μg/m³</p>
                        <p><strong>SO₂:</strong> ${components.so2} μg/m³</p>
                        <p><strong>NH₃:</strong> ${components.nh3} μg/m³</p>
                    </div>
                </div>
            `;
        }
        // Get UV Index
        async function getUVIndex() {
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value;
            const zip = document.getElementById('zip').value.trim();
            if (!city && !zip) {
                document.getElementById('result-area').innerHTML = '<p class="error">Please enter a city name or ZIP code.</p>';
                return;
            }
            showLoading();
            try {
                const response = await fetch(`${API_PREFIX}/api/uv`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        city: city,
                        state: state,
                        zip_code: zip
                    })
                });
                const data = await response.json();
                // hideLoading();
                if (data.success) {
                    displayUVIndex(data.data);
                } else {
                    document.getElementById('result-area').innerHTML = `<p class="error">Error: ${data.error}</p>`;
                }
            } catch (error) {
                // hideLoading();
                document.getElementById('result-area').innerHTML = `<p class="error">Network Error: ${error.message}</p>`;
            }
        }
        // Display UV Index data
        function displayUVIndex(uvData) {
    const uvi = uvData.uvi;
    const sunrise = uvData.sunrise;
    const sunset = uvData.sunset;
    const now = Math.floor(Date.now() / 1000);
    let displayUVI = uvi;
    let note = '';
    if (sunrise && sunset && (now < sunrise || now > sunset)) {
        displayUVI = 0;
        note = ' (Nighttime)';
    }
    let uvLevel = 'Low';
    let uvColor = '#289500';
    if (displayUVI >= 3 && displayUVI < 6) {
        uvLevel = 'Moderate';
        uvColor = '#f7e400';
    } else if (displayUVI >= 6 && displayUVI < 8) {
        uvLevel = 'High';
        uvColor = '#f85900';
    } else if (displayUVI >= 8 && displayUVI < 11) {
        uvLevel = 'Very High';
        uvColor = '#d8001d';
    } else if (displayUVI >= 11) {
        uvLevel = 'Extreme';
        uvColor = '#6b49c8';
    }
    // Get city/state for header
    let cityInput = document.getElementById('city').value.trim();
    let stateInput = document.getElementById('state').value;
    let stateText = '';
    if (stateInput) {
        let stateSel = document.getElementById('state');
        stateText = stateSel.options[stateSel.selectedIndex].text;
    }
    let cityName = cityInput || 'Current Location';
    let stateName = stateText || '';
    document.getElementById('result-area').innerHTML = `
        <div style="text-align:center;margin-bottom:8px;font-size:1.2em;"><b>${cityName}${stateName ? ', ' + stateName : ''}</b></div>
        <div class="weather-display">
            <div class="weather-card">
                <h3>☀️ UV Index</h3>
                <p style="font-size:2em;margin:0.2em 0;"><span style="color: ${uvColor}; font-weight: bold;">${displayUVI}</span> <span style="font-size:0.7em;">(${uvLevel})${note}</span></p>
                <p><strong>Protection:</strong> ${getUVProtection(displayUVI)}</p>
            </div>
            <div class="weather-card">
                <h3>📅 Date & Time</h3>
                <p>${new Date().toLocaleString()}</p>
            </div>
        </div>
    `;
}
        function getUVProtection(uvi) {
            if (uvi < 3) return 'No protection required';
            if (uvi < 6) return 'Wear sunglasses on bright days';
            if (uvi < 8) return 'Seek shade, wear sunscreen and protective clothing';
            if (uvi < 11) return 'Avoid being outside during midday hours';
            return 'Take all precautions - avoid sun exposure';
        }
        // Get weather alerts
        async function getAlerts() {
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value;
            const zip = document.getElementById('zip').value.trim();
            if (!city && !zip) {
                document.getElementById('result-area').innerHTML = '<p class="error">Please enter a city name or ZIP code.</p>';
                return;
            }
            showLoading();
            try {
                const response = await fetch(`${API_PREFIX}/api/alerts`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        city: city,
                        state: state,
                        zip_code: zip
                    })
                });
                const data = await response.json();
                // hideLoading();
                if (data.success) {
                    displayAlerts(data.data);
                } else {
                    document.getElementById('result-area').innerHTML = `<p class="error">Error: ${data.error}</p>`;
                }
            } catch (error) {
                // hideLoading();
                document.getElementById('result-area').innerHTML = `<p class="error">Network Error: ${error.message}</p>`;
            }
        }
        // Display weather alerts
        function displayAlerts(alertData) {
            const alerts = alertData.alerts;
            // Get city/state for header
            let cityInput = document.getElementById('city').value.trim();
            let stateInput = document.getElementById('state').value;
            let stateText = '';
            if (stateInput) {
                let stateSel = document.getElementById('state');
                stateText = stateSel.options[stateSel.selectedIndex].text;
            }
            let cityName = cityInput || 'Current Location';
            let stateName = stateText || '';
            if (alerts.length === 0) {
                document.getElementById('result-area').innerHTML = `
                    <div style="text-align:center;margin-bottom:8px;font-size:1.2em;"><b>${cityName}${stateName ? ', ' + stateName : ''}</b></div>
                    <div class="weather-card">
                        <h3>⚠️ Weather Alerts</h3>
                        <p>No active weather alerts for this location.</p>
                    </div>
                `;
                return;
            }
            let alertsHtml = `<div style=\"text-align:center;margin-bottom:8px;font-size:1.2em;\"><b>${cityName}${stateName ? ', ' + stateName : ''}</b></div><div class=\"weather-display\">`;
            alerts.forEach((alert, index) => {
                const startTime = new Date(alert.start * 1000).toLocaleString();
                const endTime = new Date(alert.end * 1000).toLocaleString();
                alertsHtml += `
                    <div class="weather-card">
                        <h3 style="color: #e74c3c;">⚠️ ${alert.event}</h3>
                        <p><strong>Sender:</strong> ${alert.sender_name}</p>
                        <p><strong>Start:</strong> ${startTime}</p>
                        <p><strong>End:</strong> ${endTime}</p>
                        <p><strong>Description:</strong> ${alert.description}</p>
                    </div>
                `;
            });
            alertsHtml += '</div>';
            document.getElementById('result-area').innerHTML = alertsHtml;
        }
    </script>
    <!-- OpenWeather Attribution -->
    <div style="text-align:center; margin-top: 2em; font-size: 0.95em;">
      <a href="https://openweathermap.org/" target="_blank" rel="noopener" style="text-decoration:none; color:inherit;">
        <img src="https://openweathermap.org/themes/openweathermap/assets/img/logo_white_cropped.png"
            alt="OpenWeather Logo" style="height:28px; vertical-align:middle; margin-right:8px;">
        <span style="color:#FFD600;">Weather data by OpenWeather</span>
    </a>
    </div>
</body>
</html>
